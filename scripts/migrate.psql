create extension if not exists pgcrypto;

create schema if not exists migrations;

set search_path to migrations, public;

create table if not exists applied_migration (
  id int primary key,
  name text not null,
  file_path text not null,
  file_name text not null,
  file_digest bytea not null,
  applied_at timestamp not null default now()
);

create temporary table local_migration_file (
  path text primary key,
  content text not null
);

create temporary table assert_migration_file_has_not_changed_since_application (
  path text primary key,
  exists boolean not null,
  digest_from_file bytea not null,
  digest_from_database bytea,
  check (
    exists = true
    and (
      digest_from_database is null
      or digest_from_database = digest_from_file
    )
  )
);

create view local_migration_file_info as (
  select
    match[2]::int as migration_id,
    match[3] as migration_name,
    match[1] as name,
    path,
    content,
    digest(content, 'sha1'::text) as digest
  from
    local_migration_file,
    regexp_match(path, '/((\d+)_(\w+)\.sql)$') as match
);

create view migration as (
  select
    applied_migration.id as database_recorded_id,
    applied_migration.file_path as database_recorded_file_path,
    applied_migration.file_digest as database_recorded_file_digest,
    applied_migration.applied_at as database_recorded_application_timestamp,
    local_migration_file_info.migration_id as file_migration_id,
    local_migration_file_info.migration_name as file_migration_name,
    local_migration_file_info.path as file_path,
    local_migration_file_info.name as file_name,
    local_migration_file_info.content as file_content,
    local_migration_file_info.digest as file_digest
  from applied_migration
  full outer join local_migration_file_info on
    local_migration_file_info.migration_id = applied_migration.id
);

create view pending_migration as (
  select
    file_migration_id,
    file_path,
    concat_ws(
      ' ',
      file_content,
      format(
        'insert into migrations.applied_migration values (%L, %L, %L, %L, %L);',
        file_migration_id,
        file_migration_name,
        file_path,
        file_name,
        file_digest
      ),
      'set search_path to public;'
    ) as migration_code
  from migration
  where database_recorded_id is null
  order by migration.file_migration_id
);

\copy local_migration_file from program 'sh scripts/migration_files_as_csv.sh' with (format csv, quote '%')

insert into assert_migration_file_has_not_changed_since_application
select
  file_path,
  file_migration_id is not null,
  file_digest,
  database_recorded_file_digest
from migration;

select file_migration_id, file_path from pending_migration;
select migration_code from pending_migration \gexec
