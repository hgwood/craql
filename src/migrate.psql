create schema if not exists migrations;

set search_path to migrations;

create table if not exists applied_migration (
  id int primary key,
  name text not null,
  file_path text not null,
  file_name text not null
);

create temporary table local_migration_file (
  path text primary key,
  content text not null
);

create temporary table assert_migration_file_exists (
  path text primary key,
  exists boolean not null check(exists)
);

create view local_migration_file_info as (
  select
    match[2]::int as migration_id,
    match[3] as migration_name,
    match[1] as name,
    path,
    content
  from
    local_migration_file,
    regexp_match(path, '/((\d+)_(\w+)\.sql)$') as match
);

create view migration as (
  select
    applied_migration.id as database_recorded_id,
    applied_migration.file_path as database_recorded_file_path,
    local_migration_file_info.migration_id as file_migration_id,
    local_migration_file_info.migration_name as file_migration_name,
    local_migration_file_info.path as file_path,
    local_migration_file_info.name as file_name,
    local_migration_file_info.content as file_content
  from applied_migration
  full outer join local_migration_file_info on
    local_migration_file_info.migration_id = applied_migration.id
);

create view pending_migration as (
  select
    file_migration_id,
    file_path,
    concat_ws(
      ' ',
      file_content,
      format(
        'insert into migrations.applied_migration (id, name, file_path, file_name) values (%L, %L, %L, %L);',
        file_migration_id,
        file_migration_name,
        file_path,
        file_name
      ),
      'set search_path to public;'
    ) as migration_code
  from migration
  where database_recorded_id is null
  order by migration.file_migration_id
);

\copy local_migration_file from program 'for each in src/*/migrations/*.sql; do echo -n $each,%; cat $each | tr ''\n'' '' ''; echo %; done' with (format csv, quote '%')

insert into assert_migration_file_exists
select
  database_recorded_file_path,
  file_migration_id is not null
from migration
where file_migration_id is null;

select file_migration_id, file_path from pending_migration;
select migration_code from pending_migration \gexec
